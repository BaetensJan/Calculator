//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the UFT Developer Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace CalculatorTestFramework
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the UFT Developer Application Model code generator.", "15.01")]
	public class CalculatorApplicationModel : AppModelBase
	{
		#region Constructors

		public CalculatorApplicationModel()
		{
			Name = @"CalculatorApplicationModel";
			CalculatorWindow = new CalculatorWindowNode(this);
			SettingsWindow = new SettingsWindowNode(this);
			RebuildDescriptions();
			
		}

		public CalculatorApplicationModel(ITestObject contextTestObject)
		{
			Name = @"CalculatorApplicationModel";
			CalculatorWindow = new CalculatorWindowNode(contextTestObject, this);
			SettingsWindow = new SettingsWindowNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public CalculatorWindowNode CalculatorWindow { get; private set; }
		public SettingsWindowNode SettingsWindow { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class CalculatorWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public CalculatorWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				OnButton = new OnButtonNode(this, applicationModel);
				OffButton = new OffButtonNode(this, applicationModel);
				OneButton = new OneButtonNode(this, applicationModel);
				SixButton = new SixButtonNode(this, applicationModel);
				AddButton = new AddButtonNode(this, applicationModel);
				ClearButton = new ClearButtonNode(this, applicationModel);
				OutputField = new OutputFieldNode(this, applicationModel);
				CalcButton = new CalcButtonNode(this, applicationModel);
				MultiplyButton = new MultiplyButtonNode(this, applicationModel);
				TwoButton = new TwoButtonNode(this, applicationModel);
				ThreeButton = new ThreeButtonNode(this, applicationModel);
				MinusButton = new MinusButtonNode(this, applicationModel);
				NineButton = new NineButtonNode(this, applicationModel);
				SettingsButton = new SettingsButtonNode(this, applicationModel);
				DisplayName = @"Calculator";
			}
		
			public CalculatorWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				OnButton = new OnButtonNode(this, applicationModel);
				OffButton = new OffButtonNode(this, applicationModel);
				OneButton = new OneButtonNode(this, applicationModel);
				SixButton = new SixButtonNode(this, applicationModel);
				AddButton = new AddButtonNode(this, applicationModel);
				ClearButton = new ClearButtonNode(this, applicationModel);
				OutputField = new OutputFieldNode(this, applicationModel);
				CalcButton = new CalcButtonNode(this, applicationModel);
				MultiplyButton = new MultiplyButtonNode(this, applicationModel);
				TwoButton = new TwoButtonNode(this, applicationModel);
				ThreeButton = new ThreeButtonNode(this, applicationModel);
				MinusButton = new MinusButtonNode(this, applicationModel);
				NineButton = new NineButtonNode(this, applicationModel);
				SettingsButton = new SettingsButtonNode(this, applicationModel);
				DisplayName = @"Calculator";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription {
				WindowTitleRegExp = @"Calculator",
				ObjectName = @"Calculator",
				FullType = @"window"
			};
			}
		
			#endregion
		
			#region Test Objects
		
			public OnButtonNode OnButton { get; private set; }
			public OffButtonNode OffButton { get; private set; }
			public OneButtonNode OneButton { get; private set; }
			public SixButtonNode SixButton { get; private set; }
			public AddButtonNode AddButton { get; private set; }
			public ClearButtonNode ClearButton { get; private set; }
			public OutputFieldNode OutputField { get; private set; }
			public CalcButtonNode CalcButton { get; private set; }
			public MultiplyButtonNode MultiplyButton { get; private set; }
			public TwoButtonNode TwoButton { get; private set; }
			public ThreeButtonNode ThreeButton { get; private set; }
			public MinusButtonNode MinusButton { get; private set; }
			public NineButtonNode NineButton { get; private set; }
			public SettingsButtonNode SettingsButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class OnButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public OnButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"On";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"onButton",
					Text = @"On"
				};
				}
			
				#endregion
			
			}

			public sealed class OffButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public OffButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Off";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"offButton",
					Text = @"Off"
				};
				}
			
				#endregion
			
			}

			public sealed class OneButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public OneButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"oneButton",
					Text = @"1"
				};
				}
			
				#endregion
			
			}

			public sealed class SixButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SixButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"6";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"sixButton",
					Text = @"6"
				};
				}
			
				#endregion
			
			}

			public sealed class AddButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public AddButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"+";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"addButton",
					Text = @"+"
				};
				}
			
				#endregion
			
			}

			public sealed class ClearButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public ClearButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"C";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"clearButton",
					Text = @"C"
				};
				}
			
				#endregion
			
			}

			public sealed class OutputFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public OutputFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"displayTextbox";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription {
					ObjectName = @"displayTextbox"
				};
				}
			
				#endregion
			
			}

			public sealed class CalcButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public CalcButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"=1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"calcButton",
					Text = @"="
				};
				}
			
				#endregion
			
			}

			public sealed class MultiplyButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public MultiplyButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"*";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"multButton",
					Text = @"*"
				};
				}
			
				#endregion
			
			}

			public sealed class TwoButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public TwoButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"2";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"twoButton",
					Text = @"2"
				};
				}
			
				#endregion
			
			}

			public sealed class ThreeButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public ThreeButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"3";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"threeButton",
					Text = @"3"
				};
				}
			
				#endregion
			
			}

			public sealed class MinusButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public MinusButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"-";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"subButton",
					Text = @"-"
				};
				}
			
				#endregion
			
			}

			public sealed class NineButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public NineButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"9";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"nineButton",
					Text = @"9"
				};
				}
			
				#endregion
			
			}

			public sealed class SettingsButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SettingsButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SettingsButton";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"settingsButton"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class SettingsWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public SettingsWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				BackButton = new BackButtonNode(this, applicationModel);
				DisplayName = @"Settings";
			}
		
			public SettingsWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				BackButton = new BackButtonNode(this, applicationModel);
				DisplayName = @"Settings";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription {
				WindowTitleRegExp = @"Settings",
				ObjectName = @"Settings",
				FullType = @"window"
			};
			}
		
			#endregion
		
			#region Test Objects
		
			public BackButtonNode BackButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class BackButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public BackButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Back";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription {
					ObjectName = @"CloseButton",
					Text = @"Back"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IEditField, HP.LFT.SDK.WPF.EditFieldDescription>, HP.LFT.SDK.WPF.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetText(string text)
			{
				 Concrete.SetText(text);
			}
	
			public void Select(int fromCharPos, int toCharPos)
			{
				 Concrete.Select(fromCharPos, toCharPos);
			}
	
			public void Select(int fromLine, int fromCharPos, int toLine, int toCharPos)
			{
				 Concrete.Select(fromLine, fromCharPos, toLine, toCharPos);
			}
	
			public void SetSecure(string encodedText)
			{
				 Concrete.SetSecure(encodedText);
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IButton, HP.LFT.SDK.WPF.ButtonDescription>, HP.LFT.SDK.WPF.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string HelpText
			{
				get { return Concrete.HelpText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public HP.LFT.SDK.WPF.IToggleButton ToggleButton
			{
				get { return Concrete.ToggleButton; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.WPF.IWindow, HP.LFT.SDK.WPF.WindowDescription>, HP.LFT.SDK.WPF.IWindow
		{
			public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
	
			public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Activate()
			{
				 Concrete.Activate();
			}
	
			public void Activate(HP.LFT.SDK.MouseButton button)
			{
				 Concrete.Activate(button);
			}
	
			public void Close()
			{
				 Concrete.Close();
			}
	
			public void Maximize()
			{
				 Concrete.Maximize();
			}
	
			public void Minimize()
			{
				 Concrete.Minimize();
			}
	
			public void Move(System.Drawing.Point point)
			{
				 Concrete.Move(point);
			}
	
			public void Move(int x, int y)
			{
				 Concrete.Move(x, y);
			}
	
			public void Resize(System.Drawing.Size size)
			{
				 Concrete.Resize(size);
			}
	
			public void Resize(int width, int height)
			{
				 Concrete.Resize(width, height);
			}
	
			public void Restore()
			{
				 Concrete.Restore();
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public HP.LFT.SDK.WindowState WindowState
			{
				get { return Concrete.WindowState; }		
			}
	
			public bool IsModal
			{
				get { return Concrete.IsModal; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
